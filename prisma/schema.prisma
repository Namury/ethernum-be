// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // output        = "../src/generated/client"
  binaryTargets = ["native", "debian-openssl-1.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Accounts {
  AccountID                  Int          @unique @default(autoincrement())
  AccountName                String       @unique @db.NVarChar(50)
  name                       String?
  email                      String       @unique
  QQ3462895993               String
  AccountLevelCode           Int          @default(0)
  CharacterCreateLimit       Int          @default(6)
  CharacterMaxCount          Int          @default(6)
  RegisterDate               DateTime     @default(now())
  PublisherCode              Int          @default(0)
  SecondAuthFailCount        Int          @default(0)
  SecondAuthCode             Int          @default(1)
  SecondAuthLockFlag         Boolean      @default(false) @db.Bit
  ResetToken                 String?
  ResetTokenExpiresAt        DateTime?
  PasswordResetRequested     Int?
  PasswordResetRequestedAt   DateTime?
  VerificationToken          String?
  VerificationTokenExpiresAt DateTime?
  EmailVerified              Boolean      @default(false) @db.Bit
  ReferralCode               String? @map("referral_code")
  Donors                     Donors[]
  VipRank                    VipRank[]
  Orders                     DuitkuOrders[]
  Characters                 Characters[]
}

model Donors {
  id             Int      @unique @default(autoincrement())
  DonorName      String
  DonationAmount String
  AccountID      Int
  Accounts       Accounts @relation(fields: [AccountID], references: [AccountID])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model VipRank {
  id        Int      @unique @default(autoincrement())
  username  String   @unique
  point     Int
  AccountID Int
  Accounts  Accounts @relation(fields: [AccountID], references: [AccountID])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DuitkuOrders {
  id        Int      @unique @default(autoincrement())
  username  String
  email     String
  reffcode  String
  order_id  String   @unique
  amount    Decimal
  status    String
  AccountID Int
  Accounts  Accounts @relation(fields: [AccountID], references: [AccountID])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DuitkuPayment DuitkuPayment[]
}

model TopUpEvent {
  id           Int      @unique @default(autoincrement())
  dateStart    DateTime
  dateEnd      DateTime
  bonusPercent Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PVPRanking {
  CharacterName String @unique @db.NVarChar(50)
  GuildName     String @db.NVarChar(50)
  PVPExp        Int
  Kill          Int
  Death         Int
}

model PVERanking {
  CharacterName  String @unique @db.NVarChar(50)
  GuildName      String @db.NVarChar(50)
  TotalRank      Int
  DifficultyStep Int    @db.SmallInt
  ClearTime      String
  MapID          Int
}

model Characters {
  CharacterID      Int              @unique
  CharacterName    String           @db.NVarChar(30)
  AccountID        Int
  Accounts         Accounts         @relation(fields: [AccountID], references: [AccountID])
  AccountLevelCode Int              @db.TinyInt
  CharacterStatus  CharacterStatus?
}

model CharacterStatus {
  CharacterID   Int        @unique
  Character     Characters @relation(fields: [CharacterID], references: [CharacterID])
  LikeCount     Int
  Coin          BigInt
  WarehouseCoin BigInt
}

model DuitkuPayment {
  id               Int     @unique @default(autoincrement())
  merchantCode     String
  amount           String?
  merchantOrderId  String?
  DuitkuOrders     DuitkuOrders? @relation(fields: [merchantOrderId], references: [order_id])
  productDetail    String?
  additionalParam  String?
  paymentCode      String?
  resultCode       String?
  merchantUserId   String?
  reference        String?
  publisherOrderId String?
  spUserHash       String?
  settlementDate   String?
  issuerCode       String?
  signature        String?
}

model DNAuth {
  id             Int @unique @default(autoincrement())
  CertifyingStep Int @default(0)
}
